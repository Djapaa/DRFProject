version: "3"

services:
  # в servicen описываются приложения. приложение web это - django devolepment сервер на которм и будет подыматься веб приложение
  web:

    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    build:
      #context определяет путь к каталогу, содержащему файл Dockerfile
      context: .

    #пробрасываем порты, соответственно 8000 порт в докер контейнере будет на 8000 порту в локальной ОС
    ports:
      - "8000:8000"

    #  Локальную папку src подключаем к папке src в докере.
    # Тк она подключенна то все изменеия которые мы будем производить в локальноый папке будут так же скопированны в папку в докере
    volumes:
      - ./src:/src

    # комманда для запуска сервера через shell
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
      
    # Виртуальное окружение сервиса
    environment:
      - DB_HOST=database
      - DB_NAME=main_db
      - DB_USER=dbuser
      - DB_PASS=pass

    # depends_on позволяет установить зависимости одинх сервисов от других.
    # В данном случае сначал должна запуститься база данных а потом web
    depends_on:
      - database

  database:
    image: postgres:14.6-alpine

    #  при помощи этой команды будет сконфигурированна БД. ТАким образом мы связваем web сервис с database сервисом
    # При помощи enviroment даются джанго права на базу постгресс
    environment:
      #Название базы
      - POSTGRES_DB=main_db
      # Пользователь который будет создан в базе и его пароль
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=pass
    volumes:
      - ~/pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7.0.5-alpine
    container_name: redis
    ports:
      - "6380:6379"
    command:
      - 'redis-server'

#  celery
  celery:
    restart: always
    build:
      context: .
    container_name: celery

    command: python -m celery -A config worker -l INFO

    volumes:
      - ./src:/src

    links:
      - redis

    depends_on:
      - database
      - redis
      - web

    environment:
      # ссылка на сервис database
      - DB_HOST=database
      - DB_NAME=main_db
      - DB_USER=dbuser
      - DB_PASS=pass

  celery-beat:
    restart: always
    build:
      context: .
    container_name: celery-beat

    command: python -m celery -A config beat -l INFO

    volumes:
      - ./src:/src

    links:
      - redis

    depends_on:
      - database
      - redis
      - web

    environment:
      # ссылка на сервис database
      - DB_HOST=database
      - DB_NAME=main_db
      - DB_USER=dbuser
      - DB_PASS=pass

  flower:
    build:
      context: .
    hostname: flower
    command: python -m celery -A config flower

    volumes:
      - ./src:/src

    ports:
      - "5555:5555"

    links:
      - redis

    depends_on:
      - database
      - redis
      - web

    environment:
      # ссылка на сервис database
      - DB_HOST=database
      - DB_NAME=main_db
      - DB_USER=dbuser
      - DB_PASS=pass